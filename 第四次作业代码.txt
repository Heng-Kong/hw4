自动化64   孔恒   2160504095

1.空域低通滤波器
(1).高斯滤波器:
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
[im,map]=imread('C:\Users\24759\Desktop\第4-次作业\test2.tif');%将test2.tif读入入matlab
figure(1);%在图片1下分四行分分别显示原始图像、3x3、5x5、7x7的图像
subplot(2,2,1);
imshow(im,map);%显示原图像
title('原始图像');
sigma=25;%高斯分布中的方差
n=3;%模板大小是3x3
image = double(im); %returns the double precision value for im
n1=floor((n+1)/2);%rounds the elements of (n+1)/2 to the nearest integers
for i=1:n 
    for j=1:n 
      b(i,j) =exp(-((i-n1)^2+(j-n1)^2)/(4*sigma))/(4*pi*sigma); 
    end 
end 
image1=conv2(image,b,'same'); 
d=uint8(image1); %returns the double precision value for image1
subplot(2,2,2);
imshow(d,map);
title('高斯滤波（3x3）')
n=5;%模板大小是5x5
n1=floor((n+1)/2);%计算图象中心 
for i=1:n 
    for j=1:n 
      b(i,j) =exp(-((i-n1)^2+(j-n1)^2)/(4*sigma))/(4*pi*sigma); %生成高斯序列b

    end 
end 
image1=conv2(image,b,'same'); %用生成的高斯序列卷积运算，进行高斯滤波
d=uint8(image1);
subplot(2,2,3);
imshow(d,map);
title('高斯滤波（5x5），sigma=25')
n=7;%模板大小是7x7
n1=floor((n+1)/2);%计算图象中心 
for i=1:n 
    for j=1:n 
      b(i,j) =exp(-((i-n1)^2+(j-n1)^2)/(4*sigma))/(4*pi*sigma); %生成高斯序列b
    end 
end 
image1=conv2(image,b,'same'); %用生成的高斯序列卷积运算，进行高斯滤波
d=uint8(image1);%converts the elements of the array image1 into unsigned 8-bit integers
subplot(2,2,4);
imshow(d,map);
title('高斯滤波（7x7）')



(2).中值滤波器
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
[im,map]=imread('C:\Users\24759\Desktop\第4-次作业\test2.tif');%将test2.tif读入入matlab
figure(1);%在图片1下分四行分分别显示原始图像、3x3、5x5、7x7的图像
subplot(2,2,1);
imshow(im,map);
title('原始图像');
[x,y]=size(im);%returns the number of rows and columns in im as separate output variables
n1=3;%模板大小是3x3
n2=5;%模板大小是5x5
n3=7;%模板大小是7x7
N1=ones(n1,n1);%an n1xn1 matrix of ones
N2=ones(n2,n2);%an n2xn2 matrix of ones
N3=ones(n3,n3);%an n3xn3 matrix of ones
x1=double(im);%returns the double precision value for im
x2=x1;
for i=2:x-1
    for j=2:y-1
        N1=[x1(i-1,j-1:j+1),x1(i+1,j-1:j+1)];
        N1=sort(N1);
        x2(i,j)=N1((n1*n1+1)/2);
    end
end
I2=uint8(x2);%converts the elements of the array x2 into unsigned 8-bit integers
subplot(2,2,2);
imshow(I2,map);
title('中值滤波（3x3）')
for i=3:x-2
    for j=3:y-2
        N2=[x1(i-2,j-2:j+2),x1(i-1,j-2:j+2),x1(i,j-2:j+2),x1(i+1,j-2:j+2),x1(i+2,j-2:j+2)];
        N2=sort(N2);
        x2(i,j)=N2((n2*n2+1)/2);
    end
end
I2=uint8(x2);%converts the elements of the array x2 into unsigned 8-bit integers
subplot(2,2,3);
imshow(I2,map);
title('中值滤波（5x5）')
for i=4:x-3
    for j=4:y-3
        N3=[x1(i-3,j-3:j+3),x1(i-2,j-3:j+3),x1(i-1,j-3:j+3),x1(i,j-3:j+3),x1(i+1,j-3:j+3),x1(i+2,j-3:j+3),x1(i+3,j-3:j+3)];
        N3=sort(N3);
        x2(i,j)=N3((n3*n3+1)/2);
    end
end
I2=uint8(x2);%converts the elements of the array x2 into unsigned 8-bit integers
subplot(2,2,4);
imshow(I2,map);
title('中值滤波（7x7）')



2.固定方差 sigma=1.5产生高斯滤波器
sigma=1.5;%高斯分布中的方差
n=3;%模板大小是3x3
n1=floor((n+1)/2);%rounds the elements of (n+1)/2 to the nearest integers
for i=1:n 
    for j=1:n 
      b(i,j) =exp(-((i-n1)^2+(j-n1)^2)/(4*sigma))/(4*pi*sigma); 
    end 
end 



3.利用高通滤波器滤波测试图像
(1).unsharp masking:
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
imamge=imread('C:\Users\24759\Desktop\第4-次作业\test4 copy.bmp'); %将test4.bmp读入入matlab
I=imamge;
imagesize=size(imamge); %returns the two-element row vector
imamge=cast(imamge,'int32'); %casts image to class int32  
tg=zeros(imagesize(1)+2,imagesize(2)+2); 
tg=cast(tg,'int32'); %casts tg to class int32   
tg(2:imagesize(1)+1,2:imagesize(2)+1) = imamge;
tg(:,1)=tg(:,2);  
tg(:,imagesize(2)+2)=tg(:,imagesize(2)+1);
tg(1,:)=tg(2,:);  
tg(imagesize(1)+2,:)=tg(imagesize(1)+1,:);
A=1.0; 
for i=2:1:imagesize(1)+1
    for j=2:1:imagesize(2)+1  
    imamge(i-1,j-1)=tg(i,j)*A-(tg(i,j)*(-8)+tg(i,j-1)+tg(i-1,j-1)+tg(i-1,j)+tg(i,j+1)+tg(i+1,j)+tg(i+1,j+1)+tg(i+1,j-1)+tg(i-1,j+1));
    end
end
imamge=cast(imamge,'uint8');  %casts image to class int32 
figure;%分两列显示原图像和利用高通滤波器滤波测试后的图像
subplot(1,2,1) 
imshow(I);  
title('原图像');
subplot(1,2,2) 
imshow(imamge); 
title('usharp masking');


(2).Sobel edge detector:
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
picture=imread('C:\Users\24759\Desktop\第4-次作业\test4 copy.bmp');%将test4.bmp读入入matlab
figure(1);%分两列显示原图像和利用高通滤波器滤波测试后的图像
subplot(1,2,1);
imshow(picture);
title('原图像');
[N,M]=size(picture);%returns the number of rows and columns in im as separate output variables
picture=double(picture);%returns the double precision value for im
h1=[-1,0,1;-2,0,2;-1,0,1];
h2=[-1,-2,-1;0,0,0;1,2,1];
Gx=conv2(picture,h1,'same');%用生成的高斯序列卷积运算，进行高斯滤波
Gy=conv2(picture,h2,'same');%用生成的高斯序列卷积运算，进行高斯滤波
F=abs(Gx)+abs(Gy);
for i=1:N
for j=1:M
    picture(i,j)=F(i,j);
end
end
picture=uint8(picture);%converts the elements of the array x2 into unsigned 8-bit integers
subplot(1,2,2);
imshow(picture);
title('Sobel');



(3).Laplace edge detection:
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
I = imread('C:\Users\24759\Desktop\第4-次作业\test4 copy.bmp'); %将test4.bmp读入入matlab
[N,M]=size(I); %returns the number of rows and columns in im as separate output variables
figure;  %分两列显示原图像和利用高通滤波器滤波测试后的图像
subplot(1,2,1); 
imshow(I); 
title('原图像'); 
t=ones(N,M); 
t=I; 
for i=2:N-1   
for j=2:M-1       
    I(i,j)=t(i+1,j)+t(i-1,j)+t(i,j+1)+t(i,j-1)-4*t(i,j);  %laplace变换
end
end
subplot(1,2,2); 
imshow(I); 
title('Laplace');


(4).Canny algorithm:
close all;%清除图形窗口
clear all;%清除MARLAB软件工作内存中的变量
clc;%清除命令窗口显示内容
I=imread('C:\Users\24759\Desktop\第4-次作业\test4 copy.bmp'); %将test4.bmp读入入matlab
subplot(1,2,1);
imshow(I);
title('原图像'); 
I1=edge(I,'canny');%Canny algorithm
subplot(1,2,2);
imshow(I1);
title('Canny');
